name: CI/CD - Build & Deploy Frontend and Backend

on:
  push:
    branches:
      - main  # O la rama que estés utilizando

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Iniciar sesión en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir y empujar la imagen del Cliente (Frontend)
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -f client/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/cliente:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/cliente:${{ github.sha }}

      # Construir y empujar la imagen del Servidor (Backend)
      - name: Build and Push Backend Docker Image
        run: |
          docker build -f server/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/servidor:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/servidor:${{ github.sha }}

  deploy-client:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into EC2 (Client) and deploy Docker container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_CLIENT_SERVER }}  # IP de la instancia EC2 para el Cliente
          username: ubuntu  # Usualmente 'ubuntu'
          key: ${{ secrets.CLIENT_SERVER_KEY }}     # Clave privada para acceder a EC2
          script: |
            # Detener cualquier contenedor viejo
            sudo docker stop cliente || true
            sudo docker rm cliente || true

            # Descargar la última imagen del Cliente desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/cliente:${{ github.sha }}

            # Ejecutar el contenedor en el puerto 80
            sudo docker run -d --name cliente -p 80:80 ${{ secrets.DOCKER_USERNAME }}/cliente:${{ github.sha }}

            # Verificar que el contenedor se está ejecutando
            sudo docker ps

  deploy-server:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into EC2 (Server) and deploy Docker container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_SERVER }}  # IP de la instancia EC2 para el Servidor
          username: ubuntu   # Usualmente 'ubuntu'
          key: ${{ secrets.SERVER_KEY }}     # Clave privada para acceder a EC2
          script: |
            # Detener cualquier contenedor viejo
            sudo docker stop servidor || true
            sudo docker rm servidor || true

            # Descargar la última imagen del Servidor desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/servidor:${{ github.sha }}

            # Ejecutar el contenedor en el puerto 4000
            sudo docker run -d --name servidor -p 4000:4000 ${{ secrets.DOCKER_USERNAME }}/servidor:${{ github.sha }}

            # Verificar que el contenedor se está ejecutando
            sudo docker ps
